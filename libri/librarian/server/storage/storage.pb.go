// Code generated by protoc-gen-go.
// source: storage.proto
// DO NOT EDIT!

/*
Package storage is a generated protocol buffer package.

It is generated from these files:
	storage.proto

It has these top-level messages:
	ECID
	Address
	Responses
	Peer
	RoutingTable
*/
package storage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ECID represents an ECDSA key-pair, whose public key x-value is used as the peer ID to outside
// world.
type ECID struct {
	// name of the curve (should always be P-256, but here for backward compatibility)
	Curve string `protobuf:"bytes,1,opt,name=curve" json:"curve,omitempty"`
	// private key
	D []byte `protobuf:"bytes,2,opt,name=D,proto3" json:"D,omitempty"`
	// x-value of public key
	X []byte `protobuf:"bytes,3,opt,name=X,proto3" json:"X,omitempty"`
	// y-value of public key
	Y []byte `protobuf:"bytes,4,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *ECID) Reset()                    { *m = ECID{} }
func (m *ECID) String() string            { return proto.CompactTextString(m) }
func (*ECID) ProtoMessage()               {}
func (*ECID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ECID) GetCurve() string {
	if m != nil {
		return m.Curve
	}
	return ""
}

func (m *ECID) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *ECID) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECID) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

// Address is a IPv4 address.
type Address struct {
	// IP address
	Ip string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	// TCP port
	Port uint32 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Address) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Address) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// Responses contains statistics about a Peer's response history.
type Responses struct {
	// epoch time (seconds since 1970 UTC) of the earliest response from the peer
	Earliest int64 `protobuf:"varint,1,opt,name=earliest" json:"earliest,omitempty"`
	// epoch time of the latest response from the peer
	Latest int64 `protobuf:"varint,2,opt,name=latest" json:"latest,omitempty"`
	// number of queries sent to the peer
	NQueries uint64 `protobuf:"varint,3,opt,name=n_queries,json=nQueries" json:"n_queries,omitempty"`
	// number of queries that errored
	NErrors uint64 `protobuf:"varint,4,opt,name=n_errors,json=nErrors" json:"n_errors,omitempty"`
}

func (m *Responses) Reset()                    { *m = Responses{} }
func (m *Responses) String() string            { return proto.CompactTextString(m) }
func (*Responses) ProtoMessage()               {}
func (*Responses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Responses) GetEarliest() int64 {
	if m != nil {
		return m.Earliest
	}
	return 0
}

func (m *Responses) GetLatest() int64 {
	if m != nil {
		return m.Latest
	}
	return 0
}

func (m *Responses) GetNQueries() uint64 {
	if m != nil {
		return m.NQueries
	}
	return 0
}

func (m *Responses) GetNErrors() uint64 {
	if m != nil {
		return m.NErrors
	}
	return 0
}

// Peer is the basic information associated with each peer in the network.
type Peer struct {
	// big-endian byte representation of 32-byte ID
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// self-reported name of the peer
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// public IP address
	PublicAddress *Address `protobuf:"bytes,3,opt,name=public_address,json=publicAddress" json:"public_address,omitempty"`
	// response history
	Responses *Responses `protobuf:"bytes,4,opt,name=responses" json:"responses,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Peer) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetPublicAddress() *Address {
	if m != nil {
		return m.PublicAddress
	}
	return nil
}

func (m *Peer) GetResponses() *Responses {
	if m != nil {
		return m.Responses
	}
	return nil
}

// StoredRoutingTable contains the essential information associated with a routing table.
type RoutingTable struct {
	// big-endian byte representation of 32-byte self ID
	SelfId []byte `protobuf:"bytes,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	// array of peers in table
	Peers []*Peer `protobuf:"bytes,2,rep,name=peers" json:"peers,omitempty"`
}

func (m *RoutingTable) Reset()                    { *m = RoutingTable{} }
func (m *RoutingTable) String() string            { return proto.CompactTextString(m) }
func (*RoutingTable) ProtoMessage()               {}
func (*RoutingTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RoutingTable) GetSelfId() []byte {
	if m != nil {
		return m.SelfId
	}
	return nil
}

func (m *RoutingTable) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func init() {
	proto.RegisterType((*ECID)(nil), "storage.ECID")
	proto.RegisterType((*Address)(nil), "storage.Address")
	proto.RegisterType((*Responses)(nil), "storage.Responses")
	proto.RegisterType((*Peer)(nil), "storage.Peer")
	proto.RegisterType((*RoutingTable)(nil), "storage.RoutingTable")
}

func init() { proto.RegisterFile("storage.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x91, 0x4f, 0x4f, 0xb3, 0x40,
	0x10, 0xc6, 0x03, 0xa5, 0xa5, 0x4c, 0xa1, 0x79, 0x33, 0x79, 0xa3, 0xa8, 0x97, 0x06, 0x2f, 0xbd,
	0xd8, 0x98, 0x7a, 0xf0, 0x6c, 0x6c, 0x4d, 0x9a, 0x78, 0xd0, 0x8d, 0x87, 0xf6, 0x44, 0x68, 0x19,
	0x1b, 0x12, 0x64, 0xd7, 0x5d, 0xd0, 0x4f, 0xe2, 0xf7, 0x35, 0xcc, 0x52, 0xbc, 0xed, 0x2f, 0xf3,
	0xe7, 0x79, 0x9e, 0x59, 0x88, 0x4c, 0x2d, 0x75, 0x76, 0xa4, 0x85, 0xd2, 0xb2, 0x96, 0xe8, 0x77,
	0x98, 0x3c, 0x81, 0xb7, 0x7e, 0xdc, 0xac, 0xf0, 0x3f, 0x0c, 0x0f, 0x8d, 0xfe, 0xa2, 0xd8, 0x99,
	0x39, 0xf3, 0x40, 0x58, 0xc0, 0x10, 0x9c, 0x55, 0xec, 0xce, 0x9c, 0x79, 0x28, 0x9c, 0x55, 0x4b,
	0xdb, 0x78, 0x60, 0x69, 0xdb, 0xd2, 0x2e, 0xf6, 0x2c, 0xed, 0x92, 0x1b, 0xf0, 0x1f, 0xf2, 0x5c,
	0x93, 0x31, 0x38, 0x05, 0xb7, 0x50, 0x3c, 0x15, 0x08, 0xb7, 0x50, 0x88, 0xe0, 0x29, 0xa9, 0x6b,
	0x9e, 0x8c, 0x04, 0xbf, 0x93, 0x6f, 0x08, 0x04, 0x19, 0x25, 0x2b, 0x43, 0x06, 0x2f, 0x61, 0x4c,
	0x99, 0x2e, 0x0b, 0x32, 0x35, 0xcb, 0x0f, 0x44, 0xcf, 0x78, 0x06, 0xa3, 0x32, 0xab, 0xdb, 0x8a,
	0xcb, 0x95, 0x8e, 0xf0, 0x0a, 0x82, 0x2a, 0xfd, 0x6c, 0x48, 0x17, 0x64, 0x78, 0xb3, 0x27, 0xc6,
	0xd5, 0xab, 0x65, 0xbc, 0x80, 0x71, 0x95, 0x92, 0xd6, 0x52, 0x1b, 0x76, 0xe8, 0x09, 0xbf, 0x5a,
	0x33, 0x26, 0x3f, 0x0e, 0x78, 0x2f, 0x44, 0x9a, 0x5d, 0xe6, 0x2c, 0x17, 0x0a, 0xb7, 0xc8, 0x5b,
	0x97, 0x55, 0xf6, 0x41, 0x9d, 0x6f, 0x7e, 0xe3, 0x3d, 0x4c, 0x55, 0xb3, 0x2f, 0x8b, 0x43, 0x9a,
	0xd9, 0x6c, 0xac, 0x34, 0x59, 0xfe, 0x5b, 0x9c, 0xae, 0xd9, 0x65, 0x16, 0x91, 0xed, 0x3b, 0x9d,
	0xe0, 0x16, 0x02, 0x7d, 0x8a, 0xc7, 0x0e, 0x26, 0x4b, 0xec, 0x67, 0xfa, 0xe0, 0xe2, 0xaf, 0x29,
	0x79, 0x86, 0x50, 0xc8, 0xa6, 0x2e, 0xaa, 0xe3, 0x5b, 0xb6, 0x2f, 0x09, 0xcf, 0xc1, 0x37, 0x54,
	0xbe, 0xa7, 0xbd, 0xc7, 0x51, 0x8b, 0x9b, 0x1c, 0xaf, 0x61, 0xa8, 0x88, 0xb4, 0x89, 0xdd, 0xd9,
	0x60, 0x3e, 0x59, 0x46, 0xfd, 0xda, 0x36, 0x95, 0xb0, 0xb5, 0xfd, 0x88, 0x7f, 0xf9, 0xee, 0x37,
	0x00, 0x00, 0xff, 0xff, 0xbb, 0x99, 0xe2, 0x64, 0xf6, 0x01, 0x00, 0x00,
}
