// Code generated by protoc-gen-go.
// source: librarian.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	librarian.proto

It has these top-level messages:
	PingRequest
	PingResponse
	IdentityRequest
	IdentityResponse
	FindRequest
	PeerAddress
	FindResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PingResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type IdentityRequest struct {
	// 32-byte unique request ID
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *IdentityRequest) Reset()                    { *m = IdentityRequest{} }
func (m *IdentityRequest) String() string            { return proto.CompactTextString(m) }
func (*IdentityRequest) ProtoMessage()               {}
func (*IdentityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IdentityRequest) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

type IdentityResponse struct {
	// ID of request that generated this response
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 32-byte peer ID
	PeerId []byte `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// self-reported name of the peer
	PeerName string `protobuf:"bytes,3,opt,name=peer_name,json=peerName" json:"peer_name,omitempty"`
}

func (m *IdentityResponse) Reset()                    { *m = IdentityResponse{} }
func (m *IdentityResponse) String() string            { return proto.CompactTextString(m) }
func (*IdentityResponse) ProtoMessage()               {}
func (*IdentityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IdentityResponse) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *IdentityResponse) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *IdentityResponse) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

type FindRequest struct {
	// 32-byte unique request ID
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 32-byte target to find peers around
	Target []byte `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// the number of closests peers to return
	NumPeers uint32 `protobuf:"varint,3,opt,name=num_peers,json=numPeers" json:"num_peers,omitempty"`
}

func (m *FindRequest) Reset()                    { *m = FindRequest{} }
func (m *FindRequest) String() string            { return proto.CompactTextString(m) }
func (*FindRequest) ProtoMessage()               {}
func (*FindRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FindRequest) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *FindRequest) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *FindRequest) GetNumPeers() uint32 {
	if m != nil {
		return m.NumPeers
	}
	return 0
}

type PeerAddress struct {
	// 32-byte peer ID
	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// self-reported name of the peer
	PeerName string `protobuf:"bytes,2,opt,name=peer_name,json=peerName" json:"peer_name,omitempty"`
	// public IP address
	Ip string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	// public address TCP port
	Port uint32 `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
}

func (m *PeerAddress) Reset()                    { *m = PeerAddress{} }
func (m *PeerAddress) String() string            { return proto.CompactTextString(m) }
func (*PeerAddress) ProtoMessage()               {}
func (*PeerAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PeerAddress) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *PeerAddress) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

func (m *PeerAddress) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PeerAddress) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type FindResponse struct {
	// ID of request that generated this response
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// list of peers closest to target
	Addresses []*PeerAddress `protobuf:"bytes,2,rep,name=addresses" json:"addresses,omitempty"`
	// value, if found
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *FindResponse) Reset()                    { *m = FindResponse{} }
func (m *FindResponse) String() string            { return proto.CompactTextString(m) }
func (*FindResponse) ProtoMessage()               {}
func (*FindResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FindResponse) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *FindResponse) GetAddresses() []*PeerAddress {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *FindResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "api.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "api.PingResponse")
	proto.RegisterType((*IdentityRequest)(nil), "api.IdentityRequest")
	proto.RegisterType((*IdentityResponse)(nil), "api.IdentityResponse")
	proto.RegisterType((*FindRequest)(nil), "api.FindRequest")
	proto.RegisterType((*PeerAddress)(nil), "api.PeerAddress")
	proto.RegisterType((*FindResponse)(nil), "api.FindResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Librarian service

type LibrarianClient interface {
	// Ping confirms simple request/response connectivity.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Identify identifies the node by name and ID.
	Identify(ctx context.Context, in *IdentityRequest, opts ...grpc.CallOption) (*IdentityResponse, error)
	// FindPeers returns the closest peers to a given target.
	FindPeers(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
}

type librarianClient struct {
	cc *grpc.ClientConn
}

func NewLibrarianClient(cc *grpc.ClientConn) LibrarianClient {
	return &librarianClient{cc}
}

func (c *librarianClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/api.Librarian/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianClient) Identify(ctx context.Context, in *IdentityRequest, opts ...grpc.CallOption) (*IdentityResponse, error) {
	out := new(IdentityResponse)
	err := grpc.Invoke(ctx, "/api.Librarian/Identify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianClient) FindPeers(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := grpc.Invoke(ctx, "/api.Librarian/FindPeers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Librarian service

type LibrarianServer interface {
	// Ping confirms simple request/response connectivity.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Identify identifies the node by name and ID.
	Identify(context.Context, *IdentityRequest) (*IdentityResponse, error)
	// FindPeers returns the closest peers to a given target.
	FindPeers(context.Context, *FindRequest) (*FindResponse, error)
}

func RegisterLibrarianServer(s *grpc.Server, srv LibrarianServer) {
	s.RegisterService(&_Librarian_serviceDesc, srv)
}

func _Librarian_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Librarian/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Librarian_Identify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServer).Identify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Librarian/Identify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServer).Identify(ctx, req.(*IdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Librarian_FindPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServer).FindPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Librarian/FindPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServer).FindPeers(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Librarian_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Librarian",
	HandlerType: (*LibrarianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Librarian_Ping_Handler,
		},
		{
			MethodName: "Identify",
			Handler:    _Librarian_Identify_Handler,
		},
		{
			MethodName: "FindPeers",
			Handler:    _Librarian_FindPeers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "librarian.proto",
}

func init() { proto.RegisterFile("librarian.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x5f, 0x6b, 0xfa, 0x30,
	0x14, 0xb5, 0xd5, 0x9f, 0xda, 0xdb, 0xfa, 0xd3, 0x5d, 0xdc, 0x56, 0x1c, 0x03, 0xc9, 0x93, 0x2f,
	0x2b, 0xc3, 0x3d, 0xed, 0x71, 0x2f, 0x03, 0x61, 0x0c, 0xe9, 0x17, 0x90, 0x48, 0xb3, 0x12, 0xb0,
	0x69, 0x96, 0xb4, 0x03, 0x3f, 0xd2, 0xbe, 0xe5, 0x48, 0x52, 0x67, 0x27, 0x6c, 0xf8, 0x76, 0xcf,
	0xfd, 0x77, 0x4e, 0x6e, 0x0e, 0x8c, 0x77, 0x7c, 0xab, 0xa8, 0xe2, 0x54, 0x24, 0x52, 0x95, 0x55,
	0x89, 0x5d, 0x2a, 0x39, 0x19, 0x41, 0xb8, 0xe6, 0x22, 0x4f, 0xd9, 0x7b, 0xcd, 0x74, 0x45, 0x16,
	0x10, 0x39, 0xa8, 0x65, 0x29, 0x34, 0xc3, 0x18, 0x06, 0x05, 0xd3, 0x9a, 0xe6, 0x2c, 0xf6, 0xe6,
	0xde, 0x22, 0x48, 0x0f, 0x90, 0xdc, 0xc3, 0x78, 0x95, 0x31, 0x51, 0xf1, 0x6a, 0xdf, 0x0c, 0xe3,
	0x2d, 0x80, 0x72, 0xe1, 0x86, 0x67, 0xb6, 0x3f, 0x4a, 0x83, 0x26, 0xb3, 0xca, 0x48, 0x0e, 0x93,
	0xe3, 0x44, 0xb3, 0xff, 0xef, 0x11, 0xbc, 0x86, 0x81, 0x64, 0x4c, 0x99, 0x9a, 0x6f, 0x6b, 0x7d,
	0x03, 0x57, 0x19, 0xde, 0x40, 0x60, 0x0b, 0x82, 0x16, 0x2c, 0xee, 0x5a, 0x65, 0x43, 0x93, 0x78,
	0xa5, 0x05, 0x23, 0x14, 0xc2, 0x67, 0x2e, 0xb2, 0xf3, 0x64, 0xe1, 0x15, 0xf4, 0x2b, 0xaa, 0x72,
	0x56, 0x1d, 0x28, 0x1c, 0x32, 0x14, 0xa2, 0x2e, 0x36, 0x66, 0xab, 0xb6, 0x14, 0xa3, 0x74, 0x28,
	0xea, 0x62, 0x6d, 0x30, 0xc9, 0x21, 0x34, 0xc1, 0x53, 0x96, 0x29, 0xa6, 0x75, 0x5b, 0xa7, 0xf7,
	0xbb, 0x4e, 0xff, 0xa7, 0x4e, 0xfc, 0x0f, 0x3e, 0x97, 0x8d, 0x7a, 0x9f, 0x4b, 0x44, 0xe8, 0xc9,
	0x52, 0x55, 0x71, 0xcf, 0x92, 0xd9, 0x98, 0x68, 0x88, 0xdc, 0x5b, 0xce, 0x3b, 0x58, 0x02, 0x01,
	0x75, 0x9a, 0x98, 0x8e, 0xfd, 0x79, 0x77, 0x11, 0x2e, 0x27, 0x09, 0x95, 0x3c, 0x69, 0xa9, 0x4d,
	0x8f, 0x2d, 0x38, 0x85, 0x7f, 0x1f, 0x74, 0x57, 0xbb, 0x1b, 0x46, 0xa9, 0x03, 0xcb, 0x4f, 0x0f,
	0x82, 0x97, 0x83, 0x5b, 0xf0, 0x0e, 0x7a, 0xc6, 0x13, 0xd8, 0x2c, 0x3a, 0xba, 0x65, 0x76, 0xd1,
	0xca, 0x38, 0x7d, 0xa4, 0x83, 0x8f, 0x30, 0x74, 0xdf, 0xfc, 0xb6, 0xc7, 0xa9, 0x6d, 0x38, 0xf1,
	0xc9, 0xec, 0xf2, 0x24, 0xfb, 0x3d, 0xba, 0x84, 0xc0, 0x3c, 0xd6, 0x9e, 0xb8, 0xa1, 0x6b, 0x7d,
	0x64, 0x43, 0xd7, 0x3e, 0x07, 0xe9, 0x6c, 0xfb, 0xd6, 0xcc, 0x0f, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x82, 0xaf, 0xa0, 0xd4, 0xdf, 0x02, 0x00, 0x00,
}
