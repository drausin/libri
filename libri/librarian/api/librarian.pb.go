// Code generated by protoc-gen-go.
// source: librarian.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	librarian.proto

It has these top-level messages:
	RequestMetadata
	ResponseMetadata
	PingRequest
	PingResponse
	IntroduceRequest
	IntroduceResponse
	FindRequest
	FindResponse
	PeerAddress
	StoreRequest
	StoreResponse
	GetRequest
	GetResponse
	PutRequest
	PutResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PutOperation int32

const (
	// new value was added
	PutOperation_STORED PutOperation = 0
	// value already existed
	PutOperation_LEFT_EXISTING PutOperation = 1
)

var PutOperation_name = map[int32]string{
	0: "STORED",
	1: "LEFT_EXISTING",
}
var PutOperation_value = map[string]int32{
	"STORED":        0,
	"LEFT_EXISTING": 1,
}

func (x PutOperation) String() string {
	return proto.EnumName(PutOperation_name, int32(x))
}
func (PutOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// RequestMetadata defines metadata associated with every request.
type RequestMetadata struct {
	// 32-byte unique request ID
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// peer's ECDSA public key
	PubKey []byte `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (m *RequestMetadata) Reset()                    { *m = RequestMetadata{} }
func (m *RequestMetadata) String() string            { return proto.CompactTextString(m) }
func (*RequestMetadata) ProtoMessage()               {}
func (*RequestMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestMetadata) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *RequestMetadata) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type ResponseMetadata struct {
	// 32-byte request ID that generated this response
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// peer's ECDSA public key
	PubKey []byte `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (m *ResponseMetadata) Reset()                    { *m = ResponseMetadata{} }
func (m *ResponseMetadata) String() string            { return proto.CompactTextString(m) }
func (*ResponseMetadata) ProtoMessage()               {}
func (*ResponseMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResponseMetadata) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *ResponseMetadata) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PingResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PingResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type IntroduceRequest struct {
	Metadata *RequestMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// info about the peer making the introduction
	Self *PeerAddress `protobuf:"bytes,2,opt,name=self" json:"self,omitempty"`
	// number of peer librarians to request info for
	NumPeers uint32 `protobuf:"varint,3,opt,name=num_peers,json=numPeers" json:"num_peers,omitempty"`
}

func (m *IntroduceRequest) Reset()                    { *m = IntroduceRequest{} }
func (m *IntroduceRequest) String() string            { return proto.CompactTextString(m) }
func (*IntroduceRequest) ProtoMessage()               {}
func (*IntroduceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IntroduceRequest) GetMetadata() *RequestMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *IntroduceRequest) GetSelf() *PeerAddress {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *IntroduceRequest) GetNumPeers() uint32 {
	if m != nil {
		return m.NumPeers
	}
	return 0
}

type IntroduceResponse struct {
	Metadata *ResponseMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// info about the peer receiving the introduction
	Self *PeerAddress `protobuf:"bytes,2,opt,name=self" json:"self,omitempty"`
	// info about other peers
	Peers []*PeerAddress `protobuf:"bytes,3,rep,name=peers" json:"peers,omitempty"`
}

func (m *IntroduceResponse) Reset()                    { *m = IntroduceResponse{} }
func (m *IntroduceResponse) String() string            { return proto.CompactTextString(m) }
func (*IntroduceResponse) ProtoMessage()               {}
func (*IntroduceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IntroduceResponse) GetMetadata() *ResponseMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *IntroduceResponse) GetSelf() *PeerAddress {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *IntroduceResponse) GetPeers() []*PeerAddress {
	if m != nil {
		return m.Peers
	}
	return nil
}

type FindRequest struct {
	Metadata *RequestMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// 32-byte target to find peers around
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// the number of closests peers to return
	NumPeers uint32 `protobuf:"varint,3,opt,name=num_peers,json=numPeers" json:"num_peers,omitempty"`
}

func (m *FindRequest) Reset()                    { *m = FindRequest{} }
func (m *FindRequest) String() string            { return proto.CompactTextString(m) }
func (*FindRequest) ProtoMessage()               {}
func (*FindRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FindRequest) GetMetadata() *RequestMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *FindRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *FindRequest) GetNumPeers() uint32 {
	if m != nil {
		return m.NumPeers
	}
	return 0
}

type FindResponse struct {
	Metadata *ResponseMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// list of peers closest to target
	Peers []*PeerAddress `protobuf:"bytes,2,rep,name=peers" json:"peers,omitempty"`
	// value, if found
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *FindResponse) Reset()                    { *m = FindResponse{} }
func (m *FindResponse) String() string            { return proto.CompactTextString(m) }
func (*FindResponse) ProtoMessage()               {}
func (*FindResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FindResponse) GetMetadata() *ResponseMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *FindResponse) GetPeers() []*PeerAddress {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *FindResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PeerAddress struct {
	// 32-byte peer ID
	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// self-reported name of the peer
	PeerName string `protobuf:"bytes,2,opt,name=peer_name,json=peerName" json:"peer_name,omitempty"`
	// public IP address
	Ip string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	// public address TCP port
	Port uint32 `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
}

func (m *PeerAddress) Reset()                    { *m = PeerAddress{} }
func (m *PeerAddress) String() string            { return proto.CompactTextString(m) }
func (*PeerAddress) ProtoMessage()               {}
func (*PeerAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PeerAddress) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *PeerAddress) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

func (m *PeerAddress) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PeerAddress) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type StoreRequest struct {
	Metadata *RequestMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// key to store value under
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// value to store for key
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *StoreRequest) Reset()                    { *m = StoreRequest{} }
func (m *StoreRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreRequest) ProtoMessage()               {}
func (*StoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StoreRequest) GetMetadata() *RequestMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *StoreRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *StoreRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type StoreResponse struct {
	Metadata *ResponseMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *StoreResponse) Reset()                    { *m = StoreResponse{} }
func (m *StoreResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreResponse) ProtoMessage()               {}
func (*StoreResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StoreResponse) GetMetadata() *ResponseMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type GetRequest struct {
	Metadata *RequestMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// 32-byte
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetRequest) GetMetadata() *RequestMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetResponse struct {
	Metadata *ResponseMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// value to store for key
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetResponse) GetMetadata() *ResponseMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PutRequest struct {
	Metadata *RequestMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// key to store value under
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// value to store for key
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PutRequest) GetMetadata() *RequestMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PutRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PutRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PutResponse struct {
	Metadata *ResponseMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// result of the put operation
	Operation PutOperation `protobuf:"varint,2,opt,name=operation,enum=api.PutOperation" json:"operation,omitempty"`
	// number of replicas of the stored value; only populated for operation = ADDED
	NReplicas uint32 `protobuf:"varint,3,opt,name=n_replicas,json=nReplicas" json:"n_replicas,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PutResponse) GetMetadata() *ResponseMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PutResponse) GetOperation() PutOperation {
	if m != nil {
		return m.Operation
	}
	return PutOperation_STORED
}

func (m *PutResponse) GetNReplicas() uint32 {
	if m != nil {
		return m.NReplicas
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestMetadata)(nil), "api.RequestMetadata")
	proto.RegisterType((*ResponseMetadata)(nil), "api.ResponseMetadata")
	proto.RegisterType((*PingRequest)(nil), "api.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "api.PingResponse")
	proto.RegisterType((*IntroduceRequest)(nil), "api.IntroduceRequest")
	proto.RegisterType((*IntroduceResponse)(nil), "api.IntroduceResponse")
	proto.RegisterType((*FindRequest)(nil), "api.FindRequest")
	proto.RegisterType((*FindResponse)(nil), "api.FindResponse")
	proto.RegisterType((*PeerAddress)(nil), "api.PeerAddress")
	proto.RegisterType((*StoreRequest)(nil), "api.StoreRequest")
	proto.RegisterType((*StoreResponse)(nil), "api.StoreResponse")
	proto.RegisterType((*GetRequest)(nil), "api.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "api.GetResponse")
	proto.RegisterType((*PutRequest)(nil), "api.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "api.PutResponse")
	proto.RegisterEnum("api.PutOperation", PutOperation_name, PutOperation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Librarian service

type LibrarianClient interface {
	// Ping confirms simple request/response connectivity.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Identify identifies the node by name and ID.
	Introduce(ctx context.Context, in *IntroduceRequest, opts ...grpc.CallOption) (*IntroduceResponse, error)
	// Find returns the value for a key or the closest peers to it.
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
	// Store stores a value in a given key.
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	// Get retrieves a value, if it exists.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Put stores a value.
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
}

type librarianClient struct {
	cc *grpc.ClientConn
}

func NewLibrarianClient(cc *grpc.ClientConn) LibrarianClient {
	return &librarianClient{cc}
}

func (c *librarianClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/api.Librarian/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianClient) Introduce(ctx context.Context, in *IntroduceRequest, opts ...grpc.CallOption) (*IntroduceResponse, error) {
	out := new(IntroduceResponse)
	err := grpc.Invoke(ctx, "/api.Librarian/Introduce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := grpc.Invoke(ctx, "/api.Librarian/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := grpc.Invoke(ctx, "/api.Librarian/Store", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/api.Librarian/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/api.Librarian/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Librarian service

type LibrarianServer interface {
	// Ping confirms simple request/response connectivity.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Identify identifies the node by name and ID.
	Introduce(context.Context, *IntroduceRequest) (*IntroduceResponse, error)
	// Find returns the value for a key or the closest peers to it.
	Find(context.Context, *FindRequest) (*FindResponse, error)
	// Store stores a value in a given key.
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	// Get retrieves a value, if it exists.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Put stores a value.
	Put(context.Context, *PutRequest) (*PutResponse, error)
}

func RegisterLibrarianServer(s *grpc.Server, srv LibrarianServer) {
	s.RegisterService(&_Librarian_serviceDesc, srv)
}

func _Librarian_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Librarian/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Librarian_Introduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServer).Introduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Librarian/Introduce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServer).Introduce(ctx, req.(*IntroduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Librarian_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Librarian/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Librarian_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Librarian/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Librarian_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Librarian/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Librarian_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Librarian/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Librarian_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Librarian",
	HandlerType: (*LibrarianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Librarian_Ping_Handler,
		},
		{
			MethodName: "Introduce",
			Handler:    _Librarian_Introduce_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Librarian_Find_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _Librarian_Store_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Librarian_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Librarian_Put_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "librarian.proto",
}

func init() { proto.RegisterFile("librarian.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x55, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0x6e, 0xda, 0xae, 0x5b, 0x2e, 0xed, 0x96, 0x5a, 0x03, 0xaa, 0x22, 0xa4, 0xc9, 0x42, 0x68,
	0x9a, 0xb4, 0x31, 0xca, 0x2b, 0x2f, 0x20, 0xb6, 0x29, 0x30, 0xb6, 0xca, 0x9b, 0x10, 0x6f, 0x95,
	0xbb, 0xdc, 0x46, 0x44, 0xe3, 0x18, 0xc7, 0x41, 0xda, 0x13, 0x8f, 0xbc, 0xf2, 0xc0, 0x1f, 0xe1,
	0x1f, 0xa2, 0x38, 0x4e, 0x13, 0x46, 0x35, 0x89, 0x32, 0xde, 0xe2, 0xbb, 0xcf, 0x77, 0xdf, 0x77,
	0xbe, 0xbb, 0xc0, 0xc6, 0x2c, 0x9a, 0x2a, 0xae, 0x22, 0x2e, 0xf6, 0xa4, 0x4a, 0x74, 0x42, 0x5a,
	0x5c, 0x46, 0x34, 0x80, 0x0d, 0x86, 0x9f, 0x33, 0x4c, 0xf5, 0x3b, 0xd4, 0x3c, 0xe4, 0x9a, 0x93,
	0x47, 0x00, 0xaa, 0x30, 0x4d, 0xa2, 0x70, 0xe0, 0x6c, 0x39, 0xdb, 0x5d, 0xe6, 0x5a, 0x4b, 0x10,
	0x92, 0x07, 0xb0, 0x2a, 0xb3, 0xe9, 0xe4, 0x13, 0x5e, 0x0f, 0x9a, 0xc6, 0xd7, 0x91, 0xd9, 0xf4,
	0x2d, 0x5e, 0xd3, 0x37, 0xe0, 0x33, 0x4c, 0x65, 0x22, 0x52, 0xfc, 0xe7, 0x58, 0x3d, 0xf0, 0xc6,
	0x91, 0xb8, 0xb2, 0xd4, 0xe8, 0x36, 0x74, 0x8b, 0x63, 0x11, 0x9e, 0x0c, 0x60, 0x35, 0xc6, 0x34,
	0xe5, 0x57, 0x68, 0x62, 0xba, 0xac, 0x3c, 0xd2, 0x6f, 0x0e, 0xf8, 0x81, 0xd0, 0x2a, 0x09, 0xb3,
	0x0b, 0xb4, 0xd7, 0xc9, 0x3e, 0xac, 0xc5, 0x96, 0x91, 0xc1, 0x7b, 0xa3, 0xcd, 0x3d, 0x2e, 0xa3,
	0xbd, 0x1b, 0xca, 0xd9, 0x1c, 0x45, 0x1e, 0x43, 0x3b, 0xc5, 0xd9, 0xa5, 0x61, 0xe5, 0x8d, 0x7c,
	0x83, 0x1e, 0x23, 0xaa, 0x97, 0x61, 0xa8, 0x30, 0x4d, 0x99, 0xf1, 0x92, 0x87, 0xe0, 0x8a, 0x2c,
	0x9e, 0x48, 0x44, 0x95, 0x0e, 0x5a, 0x5b, 0xce, 0x76, 0x8f, 0xad, 0x89, 0x2c, 0xce, 0x81, 0x29,
	0xfd, 0xe1, 0x40, 0xbf, 0xc6, 0xc4, 0x32, 0x7f, 0xf6, 0x07, 0x95, 0x7b, 0x96, 0xca, 0xef, 0x95,
	0xfb, 0x6b, 0x2e, 0x4f, 0x60, 0xa5, 0xe4, 0xd1, 0x5a, 0x08, 0x2b, 0xdc, 0x54, 0x80, 0x77, 0x18,
	0x89, 0x70, 0xf9, 0xd2, 0xf8, 0xd0, 0xaa, 0xde, 0x2b, 0xff, 0xbc, 0xbd, 0x0c, 0x5f, 0xa1, 0x5b,
	0xe4, 0x5b, 0xbe, 0x00, 0x73, 0x69, 0xcd, 0x5b, 0xa5, 0x91, 0x4d, 0x58, 0xf9, 0xc2, 0x67, 0x19,
	0x1a, 0x0e, 0x5d, 0x56, 0x1c, 0xe8, 0x15, 0x78, 0x35, 0xac, 0x69, 0x39, 0x44, 0x55, 0xb5, 0x63,
	0x27, 0x3f, 0x06, 0x61, 0xae, 0xc2, 0x38, 0x04, 0x8f, 0xd1, 0xa8, 0x73, 0xd9, 0x5a, 0x6e, 0x38,
	0xe1, 0x31, 0x92, 0x75, 0x68, 0x46, 0xd2, 0xc4, 0x75, 0x59, 0x33, 0x92, 0x84, 0x40, 0x5b, 0x26,
	0x4a, 0x0f, 0xda, 0x46, 0xad, 0xf9, 0xa6, 0x1f, 0xa1, 0x7b, 0xa6, 0x13, 0x85, 0x77, 0x59, 0xda,
	0xc5, 0x92, 0x5e, 0x41, 0xcf, 0x66, 0x5a, 0xba, 0xa8, 0x74, 0x0c, 0x70, 0x84, 0xfa, 0x0e, 0xb9,
	0xd2, 0xf7, 0xe0, 0x99, 0x88, 0xcb, 0x3f, 0xf4, 0x62, 0xb5, 0x97, 0x00, 0xe3, 0x4c, 0xff, 0xff,
	0xaa, 0x7e, 0x77, 0xc0, 0x33, 0x89, 0x96, 0x17, 0xf0, 0x14, 0xdc, 0x44, 0xa2, 0xe2, 0x3a, 0x4a,
	0x84, 0x49, 0xb8, 0x3e, 0xea, 0x17, 0xdd, 0x9a, 0xe9, 0xd3, 0xd2, 0xc1, 0x2a, 0x4c, 0xbe, 0x1f,
	0xc5, 0x44, 0xa1, 0x9c, 0x45, 0x17, 0xbc, 0x9c, 0x1d, 0x57, 0x30, 0x6b, 0xd8, 0xd9, 0x85, 0x6e,
	0xfd, 0x26, 0x01, 0xe8, 0x9c, 0x9d, 0x9f, 0xb2, 0x83, 0xd7, 0x7e, 0x83, 0xf4, 0xa1, 0x77, 0x7c,
	0x70, 0x78, 0x3e, 0x39, 0xf8, 0x10, 0x9c, 0x9d, 0x07, 0x27, 0x47, 0xbe, 0x33, 0xfa, 0xd9, 0x04,
	0xf7, 0xb8, 0xdc, 0xf2, 0x64, 0x17, 0xda, 0xf9, 0xd2, 0x24, 0x76, 0x5e, 0xaa, 0x75, 0x3a, 0xec,
	0xd7, 0x2c, 0x85, 0x16, 0xda, 0x20, 0x2f, 0xc0, 0x9d, 0xaf, 0x2b, 0x52, 0x28, 0xbd, 0xb9, 0x48,
	0x87, 0xf7, 0x6f, 0x9a, 0xe7, 0xb7, 0x77, 0xa1, 0x9d, 0x8f, 0xb9, 0x4d, 0x56, 0xdb, 0x30, 0x36,
	0x59, 0x7d, 0x07, 0xd0, 0x06, 0xd9, 0x87, 0x15, 0xd3, 0xc1, 0xa4, 0xf0, 0xd6, 0xe7, 0x66, 0x48,
	0xea, 0xa6, 0xf9, 0x8d, 0x1d, 0x68, 0x1d, 0xa1, 0x26, 0x1b, 0xc6, 0x59, 0x75, 0xee, 0xd0, 0xaf,
	0x0c, 0x75, 0xec, 0x38, 0x2b, 0xb1, 0x55, 0xef, 0x58, 0x6c, 0xed, 0x8d, 0x69, 0x63, 0xda, 0x31,
	0x3f, 0xc3, 0xe7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x8a, 0x84, 0x2c, 0x1f, 0x07, 0x00,
	0x00,
}
