apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    name: prometheus
    kubernetes.io/name: "Prometheus"
  name: prometheus
spec:
  selector:
    app: prometheus
#  type: NodePort
  ports:
  - name: prometheus
    protocol: TCP
    port: 9090
    targetPort: 9090
---
# Useful examples on how to configure Prometheus
# * https://www.weave.works/prometheus-and-kubernetes-monitoring-your-applications/
# * https://grafana.net/dashboards/162
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-configmap
data:
  prometheus.yml: |-
    # A scrape configuration for running Prometheus on a Kubernetes cluster.
    # This uses separate scrape configs for cluster components (i.e. API server, node)
    # and services to allow each to use different authentication configs.
    #
    # Kubernetes labels will be added as Prometheus labels on metrics via the
    # `labelmap` relabeling action.
    #rule_files:
    #  - "/etc/prometheus-rules/*.rules"

    # Scrape config for cluster components.
    scrape_configs:
    - job_name: 'etcd'
      scheme: http
      kubernetes_sd_configs:
      - api_server: http://kubernetes.default.svc
        role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - source_labels: [__address__]
        regex: '(.*):10250'
        replacement: '${1}:2379'
        target_label: __address__

    - job_name: 'kubernetes-cluster'
      scheme: http
      kubernetes_sd_configs:
      - api_server: http://kubernetes.default.svc
        role: service

    - job_name: 'kubernetes-nodes'
      scheme: http
      kubernetes_sd_configs:
      - api_server: http://kubernetes.default.svc
        role: node

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      # Use insecure read-only HTTP 10255 port
      # More info is here: http://github.com/kayrus/kubelet-exploit
      - source_labels: [__address__]
        regex: '(.*):10250'
        replacement: '${1}:10255'
        target_label: __address__

    - job_name: 'kubernetes-node-exporter'
      kubernetes_sd_configs:
      - api_server: http://kubernetes.default.svc
        role: node

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - source_labels: [__meta_kubernetes_role]
        action: replace
        target_label: kubernetes_role
      - source_labels: [__address__]
        regex: '(.*):10250'
        replacement: '${1}:9100'
        target_label: __address__
      - source_labels: [__meta_kubernetes_node_label_kubernetes_io_hostname]
        target_label: __instance__
      # set "name" value to "job"
      - source_labels: [job]
        regex: 'kubernetes-(.*)'
        replacement: '${1}'
        target_label: name

    # Scrape config for service endpoints.
    #
    # The relabeling allows the actual service scrape endpoint to be configured
    # via the following annotations:
    #
    # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
    # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
    # to set this to `https` & most likely set the `tls_config` of the scrape config.
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: If the metrics are exposed on a different port to the
    # service then set this appropriately.
    - job_name: 'kubernetes-service-endpoints'

      kubernetes_sd_configs:
      - api_server: http://kubernetes.default.svc
        role: endpoints

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: (.+)(?::\d+);(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_service_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      name: prometheus
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
          - '-storage.local.retention=360h'
          - '-storage.local.memory-chunks=1048576'
          - '-config.file=/etc/prometheus/prometheus.yml'
#          - '-alertmanager.url=http://alertmanager:9093/alertmanager'
#          - '-web.external-url=$(EXTERNAL_URL)'
        ports:
        - name: web
          containerPort: 9090
#        env:
#        - name: EXTERNAL_URL
#          valueFrom:
#            configMapKeyRef:
#              name: external-url
#              key: url
#        - name: STORAGE_RETENTION
#          valueFrom:
#            configMapKeyRef:
#              name: prometheus-env
#              key: storage-retention
#        - name: STORAGE_MEMORY_CHUNKS
#          valueFrom:
#            configMapKeyRef:
#              name: prometheus-env
#              key: storage-memory-chunks
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
#        - name: rules-volume
#          mountPath: /etc/prometheus-rules
#        - name: etcd-tls-client-certs
#          mountPath: /etc/etcd/ssl
#          readOnly: true
        - name: prometheus-data
          mountPath: /prometheus
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-configmap
#      - name: rules-volume
#        configMap:
#          name: prometheus-rules
#      - name: etcd-tls-client-certs
#        secret:
#          secretName: etcd-tls-client-certs
        #hostPath:
        #  path: /etc/ssl/etcd/
      - name: prometheus-data
        emptyDir: {}
      #- name: prometheus-data
      #  rbd:
      #    fsType: ext4
      #    image: prometheus-data
      #    keyring: /etc/ceph/keyring
      #    monitors:
      #    - ceph-mon.ceph.svc.cluster.local
      #    pool: rbd
      #    secretRef:
      #      name: ceph-secret
      #    user: admin