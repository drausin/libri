apiVersion: v1
kind: Service
metadata:
  name: prometheus
  labels:
    name: prometheus
spec:
  selector:
    app: prometheus
  type: NodePort  # prob want to move behind LB at some point
  ports:
  - name: prometheus
    protocol: TCP
    port: 9090
    targetPort: 9090
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      name: prometheus
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v1.7.1
        args:
          - '-storage.local.retention=360h'
          - '-storage.local.memory-chunks=1048576'
          - '-config.file=/etc/prometheus/prometheus.yml'
#          - '-alertmanager.url=http://alertmanager:9093/alertmanager'
#          - '-web.external-url=$(EXTERNAL_URL)'
        ports:
        - name: web
          containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
#        - name: rules-volume
#          mountPath: /etc/prometheus-rules
        - name: prometheus-data
          mountPath: /prometheus
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
#      - name: rules-volume
#        configMap:
#          name: prometheus-rules
      - name: prometheus-data
        emptyDir: {}  # TODO (drausin) PeristentVolume
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  type: NodePort  # prob want to move behind LB at some point
  ports:
  - name: grafana
    protocol: TCP
    port: 3000
    targetPort: 3000
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - image: grafana/grafana:4.4.1
        name: grafana
        resources:
        env:
            # The following env variables are required to make Grafana accessible via
            # the kubernetes api-server proxy. On production clusters, we recommend
            # removing these env variables, setup auth for grafana, and expose the grafana
            # service using a LoadBalancer or a public IP.
          - name: GF_AUTH_BASIC_ENABLED
            value: "false"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ORG_ROLE
            value: Admin
          # - name: GF_SERVER_ROOT_URL
          #   value: /api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/

        lifecycle:
          postStart:
            exec:
              command: [
                "sh", "/opt/grafana/post-start.sh", "http://localhost:3000"
              ]

        volumeMounts:
        - name: grafana-config
          mountPath: /opt/grafana
        - name: grafana-storage
          mountPath: /var

      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-storage
        emptyDir: {}
